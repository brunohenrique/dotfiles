# <type>[scope]: <description>
#   │       │             │
#   │       │             └─> Description in present tense. Not capitalized. No period at the end.
#   │       │
#   │       └─> (Optional) A scope MUST consist of a noun describing a
#   │            section of the codebase surrounded by parenthesis, e.g., fix(parser):
#   │
#   └─> Type: build|chore|ci|docs|feat|fix|perf|refactor|revert|style|test
# <BLANK LINE>
# [optional body]
# <BLANK LINE>
# [optional footer]

# type:
#
# - build:    Changes that affect the build system or external dependencies
# - chore:    Other changes that don't modify src or test files
# - ci:       Changes to our CI configuration files and scripts (examples: CircleCi, SauceLabs)
# - docs:     Documentation only changes
# - feat:     MUST be used when a commit adds a new feature to your application or library.
# - fix:      MUST be used when a commit represents a bug fix for your application.
# - perf:     A code change that improves performance
# - refactor: A code change that neither fixes a bug nor adds a feature
# - revert:   Reverts a previous commit
# - style:    Changes that do not affect the meaning of the code
# - test:     Adding missing or correcting existing tests

# optional scope:
#
# - A scope MAY be provided after a type.
# - A scope MUST consist of a noun describing a section of the codebase surrounded
# by parenthesis, e.g., fix(parser):

# description:
#
# - A description MUST immediately follow the colon and space after the type/scope
# prefix.
# - The description is a short summary of the code changes, e.g., fix: array
# parsing issue when multiple spaces were contained in string.

# optional body:
#
# - A longer commit body MAY be provided after the short description, providing
# additional contextual information about the code changes. The body MUST begin
# one blank line after the description.
# - A commit body is free-form and MAY consist of any number of newline separated paragraphs.

# optional footer(s):
#
# - One or more footers MAY be provided one blank line after the body.
# - Each footer MUST consist of a word token, followed by either a :<space>
# or <space># separator, followed by a string value (this is inspired by the
# git trailer convention[3]).
# - A footer’s token MUST use - in place of whitespace characters, e.g., Acked-by
# (this helps differentiate the footer section from a multi-paragraph body).
# - An exception is made for BREAKING CHANGE, which MAY also be used as a token.
# - A footer’s value MAY contain spaces and newlines, and parsing MUST terminate
# when the next valid footer token/separator pair is observed.

###############################################################################
###                           REFERENCES                                    ###
###############################################################################
#   1. https://www.conventionalcommits.org/en/v1.0.0/
#   2. https://github.com/angular/angular/blob/master/CONTRIBUTING.md#-commit-message-format
#   3. https://git-scm.com/docs/git-interpret-trailers
