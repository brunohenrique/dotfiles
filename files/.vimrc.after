" Use UTF-8 without BOM
set encoding=utf-8 nobomb

" Paste toggle on key F12!
set pastetoggle=<F12>

" ,----
" | Windows
" `---
set splitbelow   " Always split under
set splitright   " Always split on the right

" ,----
" | files / backup
" `----
set makeef=error.err            " When using make, where should it dump the file
set noautowrite                 " safe automacially content
set nomodeline                  " deactivate modelines: http://lists.alioth.debian.org/pipermail/pkg-vim-maintainers/2007-June/004020.html
set autoread                    " Automatically read a file that has changed on disk

" ,----
" | viminfo
" `----
" Remember things between sessions
"
" '20  - remember marks for 20 previous files
" \"50 - save 50 lines for each register
" :20  - remember 20 items in command-line history
" %    - remember the buffer list (if vim started without a file arg)
" n    - set name of viminfo file
set viminfo='20,\"50,:20,%,n~/.viminfo,!
" Show “invisible” characters
set lcs=tab:▸\ ,trail:·,eol:¬,nbsp:_
set list

" NerdTREE
let g:NERDTreeWinSize = 25
" ,----
" | UI / visual cues
" `----
syntax enable
set background=dark
color Tomorrow-Night         " Terminal Emulator scheme
set cursorline " Highlight current line
set linespace=0 "define the space between lines"

"define font"
set guifont=Ubuntu\ Mono\ Bold\ 12
"set guifont=Menlo:h14
"set guifont=Ubuntu\ Mono:h18
"set guifont=Monaco\ Bold\ 9.5
"set guifont=Monaco\ 9.5
"set guifont=Monospace\ Bold\ 10
"set guifont=Monospace\ 10
"set guifont=Courier\ 10\ Pitch\ 10
"set guifont=Terminus
"set guifont=Inconsolata-dz:h12

set wildmenu            " turn on wild menu
"set wildignorecase      " Make it easier to complete buffers, open files, etc...
set ruler               " Always show current positions along the bottom
set cmdheight=1         " the command bar is 1 line high
set number              " turn on line numbers but display them as relative to the current line
set winwidth=74         " Set the minimum window width

" We have to have a winheight bigger than we want to set winminheight. But if
" we set winheight to be huge before winminheight, the winminheight set will
" fail.
set winheight=5
set winminheight=5
set winheight=999

"indentation"
set smartindent
set autoindent
set expandtab
set tabstop=2
set softtabstop=2
set shiftwidth=2
set shiftround

" Softtabs, 2 spaces
set tabstop=2
set shiftwidth=2
set expandtab

set lz                  " do not redraw while running macros (much faster) (LazyRedraw)
set hidden              " you can change buffer without saving
set whichwrap+=<,>,h,l  " backspace and cursor keys wrap to
set shortmess=atI       " shortens messages to avoid 'press a key' prompt
set report=1            " tell us when anything is changed via :...
set complete=.,w,b,t    " Same as default except that I remove the 'u' option
set noerrorbells        " don't make noise
set fillchars=vert:\ ,stl:\ ,stlnc:\   " make the splitters between windows be blank
set showmatch           " show matching brackets
set matchtime=2         " how many tenths of a second to blink matching brackets for
set hlsearch            " do not highlight searched for phrases
set incsearch           " BUT do highlight as you type you search phrase
set so=5                " Keep 10 lines (top/bottom) for scope
set novisualbell        " don't blink
set showmode            " show mode in statusline
set startofline         " Move the cursor to the first non-blank of the line
set esckeys             " allow cursor keys in insert mode
set showmatch           " show matching brackets
hi User1 term=inverse,bold cterm=inverse,bold ctermfg=red
set wildchar=<TAB>      " Which character activates the wildmenu
set showfulltag         " When completing by tag, show the whole tag, not just the function name
if v:version >= 700
    set nocursorcolumn      " no cursor column highlighting
    set nocursorline        " no cursor line highlighting
endif
if has("gui_running")
  "color railscasts+     " Lovely theme but sucks when in diff mode
  "color solarized       " Truely amazing theme.
  color Tomorrow-Night
  "color getafe           " Amazin black theme
  set mouse=""          " I hate using the mouse for other than copying/pasting.
  "set guioptions=cei    " Set the guioptions I like
  set lines=90 columns=90
  set guioptions-=T
  set guioptions-=m
  set guioptions+=LlRrb
  set guioptions-=LlRrb
endif

" ,----
" | Shell
" `----

" ,----
" | Diff
" `----
set diffopt+=iwhite     " Add ignorance of whitespace to diff

" ,----
" | snipMate
" `----
let g:snips_author = 'Bruno Henrique - Garu <squall.bruno@gmail.com>'

" ,----
" | CtrlP
" `----
let g:ctrlp_working_path_mode = 0
let g:ctrlp_extensions = ["tag"]
let g:ctrlp_max_height = 100

" ,----
" | Vroom
" `----
let g:vroom_write_all = 1

" ,----
" | NERDTree
" `----
"let g:loaded_nerd_tree=1  " Disable NERDTree, it is driving me mad.

" Setting this below makes it sow that error messages don't disappear after
" one second on startup.
" set debug=msg

" Make the 'cw' and like commands put a $ at the end instead of just deleting
" the text and replacing it
" set cpoptions=ces$

""
"" Mappings
""

" Wipe out all buffers
" nmap <silent> <leader>wa :1,9000bwipeout<cr>
nmap <silent> <leader>wa :1,9000bd<cr>

" GRB: clear the search buffer when hitting return
nnoremap <CR> :nohlsearch<cr>

" Don't use Ex mode, use Q for formatting
map Q gq

" Source vim files
map <leader>svb :source ~/.vimrc.before<cr>
map <leader>sva :source ~/.vimrc.after<cr>

" Remap the tab key to do autocompletion or indentation depending on the
" context (from http://www.vim.org/tips/tip.php?tip_id=102)
function! InsertTabWrapper()
  let col = col('.') - 1
  if !col || getline('.')[col - 1] !~ '\k'
    return "\<tab>"
  else
    return "\<c-p>"
  endif
endfunction
inoremap <tab> <c-r>=InsertTabWrapper()<cr>
inoremap <s-tab> <c-n>


if exists("&relativenumber")
  " Use relative line numbers
  set relativenumber
  au BufReadPost * set relativenumber
endif

" spelling
nmap <leader>sn ]s
nmap <leader>sp [s
nmap <leader>s= z=
nmap <leader>sg zG
nmap <leader>sm zW
nmap <leader>se :set spelllang=en<CR>
nmap <leader>sf :set spelllang=fr<CR>
nmap <C-X>s wi<C-X>s

" put the vim directives for my file editing settings in
nmap <silent> <leader>vi ovim:set ts=2 sts=2 sw=2:<CR>vim600:fdm=marker fdl=1 fdc=0:<ESC>

" Insert my name and email
nmap <silent> <leader>me aWael Nasreddine <wael.nasreddine@gmail.com><ESC>

" Show all available VIM servers
nmap <silent> <leader>sl :echo serverlist()<CR>

" The following beast is something i didn't write... it will return the
" syntax highlighting group that the current "thing" under the cursor
" belongs to -- very useful for figuring out what to change as far as
" syntax highlighting goes.
nmap <silent> <leader>qq :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<' . synIDattr(synID(line("."),col("."),0),"name") . "> lo<" . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

" Maps to make handling windows a bit easier
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l


" Make horizontal scrolling easier
nmap <silent> <C-o> 10zl
nmap <silent> <C-i> 10zh

" Use CTRL-E to replace the original ',' mapping
nnoremap <C-E> ,

" ,----
" | Modifying defaults options
" `----
nmap <leader>elc :set listchars+=eol:$<CR>
nmap <leader>rlc :set listchars-=eol:$<CR>

" ,----
" | Par
" `----
if executable("par")
  nnoremap <silent> <leader>fp vip:!par -w<c-r>=&tw<cr><cr>
  xnoremap <silent> <leader>fp :!par -w<c-r>=&tw<cr><cr>
endif

""
"" Auto Commands
""

""
"" Abbreviations
""

" footnotes
ab ~0 [0]<esc>m`:/^--\s*/-2/<CR>o<CR>Footnotes:<CR>----------<CR>[0]
ab ~1 [1]<esc>m`:/^Footnotes\:/+2/<CR>o[1]
ab ~2 [2]<esc>m`:/^Footnotes\:/+3/<CR>o[2]
ab ~3 [3]<esc>m`:/^Footnotes\:/+4/<CR>o[3]
ab ~4 [4]<esc>m`:/^Footnotes\:/+5/<CR>o[4]
ab ~5 [5]<esc>m`:/^Footnotes\:/+6/<CR>o[5]
ab ~6 [6]<esc>m`:/^Footnotes\:/+7/<CR>o[6]
ab ~7 [7]<esc>m`:/^Footnotes\:/+8/<CR>o[7]
ab ~8 [8]<esc>m`:/^Footnotes\:/+9/<CR>o[8]
ab ~9 [9]<esc>m`:/^Footnotes\:/+10/<CR>o[9]

""
"" Typos
""

"" simple corrections
iab alos        also
iab aslo        also
iab bianry      binary
iab bianries    binaries
iab charcter    character
iab charcters   characters
iab exmaple     example
iab exmaples    examples
iab shoudl      should
iab seperate    separate
iab teh         the
iab Srever      Server
iab tpyo        typo

"" greetings

iab rr Regards,<cr>Bruno Henrique
iab grr Greetings,<cr>Bruno Henrique

""
"" Commands
""

" Seriously, guys. It's not like :W is bound to anything anyway.
command! W :w
command! Wa :wa

command! KillWhitespace :normal :%s/ *$//g<cr><c-o><cr>

""
"" Functions and their bindings
""

function! ExtractVariable()
  let name = input("Variable name: ")
  if name == ''
    return
  endif
  " Enter visual mode (not sure why this is needed since we're already in
  " visual mode anyway)
  normal! gv

  " Replace selected text with the variable name
  exec "normal c" . name
  " Define the variable on the line above
  exec "normal! O" . name . " = "
  " Paste the original selected text to be the variable value
  normal! $p
endfunction

function! InlineVariable()
  " Copy the variable under the cursor into the 'a' register
  :let l:tmp_a = @a
  :normal "ayiw
  " Delete variable and equals sign
  :normal 2daW
  " Delete the expression into the 'b' register
  :let l:tmp_b = @b
  :normal "bd$
  " Delete the remnants of the line
  :normal dd
  " Go to the end of the previous line so we can start our search for the
  " usage of the variable to replace. Doing '0' instead of 'k$' doesn't
  " work; I'm not sure why.
  normal k$
  " Find the next occurence of the variable
  exec '/\<' . @a . '\>'
  " Replace that occurence with the text we yanked
  exec ':.s/\<' . @a . '\>/' . @b
  :let @a = l:tmp_a
  :let @b = l:tmp_b
endfunction

vnoremap <leader>rv :call ExtractVariable()<cr>
nnoremap <leader>ri :call InlineVariable()<cr>

" Map keys to go to specific files
map <leader>gr :topleft :split config/routes.rb<cr>
function! ShowRoutes()
  " Requires 'scratch' plugin
  :topleft 100 :split __Routes__
  " Make sure Vim doesn't write __Routes__ as a file
  :set buftype=nofile
  " Delete everything
  :normal 1GdG
  " Put routes output in buffer
  :0r! rake -s routes
  " Size window to number of lines (1 plus rake output length)
  :exec ":normal " . line("$") . _ "
  " Move cursor to bottom
  :normal 1GG
  " Delete empty trailing line
  :normal dd
endfunction
map <leader>gR :call ShowRoutes()<cr>
map <leader>ga :CtrlP app/assets<cr>
map <leader>gC :CtrlP contao<cr>
map <leader>gv :CtrlP app/views<cr>
map <leader>gc :CtrlP app/controllers<cr>
map <leader>gm :CtrlP app/models<cr>
map <leader>gh :CtrlP app/helpers<cr>
map <leader>gl :CtrlP lib<cr>
map <leader>gp :CtrlP public<cr>
map <leader>gs :CtrlP public/stylesheets/sass<cr>
map <leader>gf :CtrlP features<cr>
map <leader>gg :topleft 100 :split Gemfile<cr>
map <leader>gt :CtrlPTag<cr>
map <leader>F :CtrlP %%<cr>

function! OpenTestAlternate()
  let new_file = AlternateForCurrentFile()
  exec ':e ' . new_file
endfunction
function! AlternateForCurrentFile()
  let current_file = expand("%")
  let new_file = current_file
  let in_spec = match(current_file, '^spec/') != -1
  let going_to_spec = !in_spec
  let in_app = match(current_file, '\<controllers\>') != -1 || match(current_file, '\<models\>') != -1 || match(current_file, '\<views\>') != -1
  if going_to_spec
    if in_app
      let new_file = substitute(new_file, '^app/', '', '')
    end
    let new_file = substitute(new_file, '\.rb$', '_spec.rb', '')
    let new_file = 'spec/' . new_file
  else
    let new_file = substitute(new_file, '_spec\.rb$', '.rb', '')
    let new_file = substitute(new_file, '^spec/', '', '')
    if in_app
      let new_file = 'app/' . new_file
    end
  endif
  return new_file
endfunction
nnoremap <leader>. :call OpenTestAlternate()<cr>
nnoremap <leader><leader> <c-^>

" Strip trailing whitespace
function! <SID>StripTrailingWhitespaces()
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Do the business:
    %s/\s\+$//e
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction
autocmd BufWritePre * :call <SID>StripTrailingWhitespaces()

" Force myself to learn the hjkl
nnoremap <Left> :echoe "Use h"<CR>
nnoremap <Right> :echoe "Use l"<CR>
nnoremap <Up> :echoe "Use k"<CR>
nnoremap <Down> :echoe "Use j"<CR>

" CoffeeScript
vmap <leader>c <esc>:'<,'>:CoffeeCompile<CR>
map <leader>c :CoffeeCompile<CR>
command -nargs=1 C CoffeeCompile | :<args>
